import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class RestaurantBot:
    def __init__(self, token: str):
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CallbackQueryHandler(self.button_handler))


    async def send_order_to_restaurant(self, order_data: dict, restaurant_chat_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ —á–∞—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = order_data['message']
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("–í —Ä–∞–±–æ—Ç–µ", callback_data=f"status_inprogress_{order_data['order_id']}"),
                InlineKeyboardButton("–í –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data=f"status_delivery_{order_data['order_id']}"),
            ],
            [
                InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–µ–Ω", callback_data=f"status_complete_{order_data['order_id']}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.application.bot.send_message(
            chat_id=restaurant_chat_id,
            text=message_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        data_parts = query.data.split('_')
        action = data_parts[0]  # status
        status = data_parts[1]  # inprogress/delivery/complete
        order_id = data_parts[2]  # ID –∑–∞–∫–∞–∑–∞
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        success = await self.update_order_status(order_id, status)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            new_text = query.message.text + f"\n\n<b>–°—Ç–∞—Ç—É—Å: {self.get_status_text(status)}</b>"
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
            await query.edit_message_text(
                text=new_text,
                parse_mode='HTML',
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
            )
            
            # –ò–ª–∏ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏, –Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é:
            await self.update_buttons(query, order_id, status)


    async def update_order_status(self, order_id: str, new_status: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤ –ë–î"""
        try:
            # –ó–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            # –ü—Ä–∏–º–µ—Ä:
            # await database.orders.update_one(
            #     {"order_id": order_id},
            #     {"$set": {"status": new_status}}
            # )
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
            print(f"Updating order {order_id} to status {new_status}")
            return True
            
        except Exception as e:
            logging.error(f"Error updating order status: {e}")
            return False
    
    

    def get_status_text(self, status: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        status_map = {
            'inprogress': 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
            'delivery': 'üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ', 
            'complete': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω'
        }
        return status_map.get(status, status)
    
    async def update_buttons(self, query: Update, order_id: str, current_status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏)"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –í —Ä–∞–±–æ—Ç–µ" if current_status == 'inprogress' else "–í —Ä–∞–±–æ—Ç–µ",
                    callback_data=f"status_inprogress_{order_id}" if current_status != 'inprogress' else None
                ),
                InlineKeyboardButton(
                    "‚úÖ –í –¥–æ—Å—Ç–∞–≤–∫–µ" if current_status == 'delivery' else "–í –¥–æ—Å—Ç–∞–≤–∫–µ", 
                    callback_data=f"status_delivery_{order_id}" if current_status != 'delivery' else None
                ),
            ],
            [
                InlineKeyboardButton(
                    "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω" if current_status == 'complete' else "–ó–∞–≤–µ—Ä—à–µ–Ω",
                    callback_data=f"status_complete_{order_id}" if current_status != 'complete' else None
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_reply_markup(reply_markup=reply_markup)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling()


class OrderService:
    def __init__(self, bot: RestaurantBot):
        self.bot = bot
        # –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω -> chat_id
        self.restaurant_chats = {
            'restaurant_1': '-1004903129172',  # -4903129172
        }

    async def create_order(self, order_data: dict):
        """–ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        restaurant_chat_id = self.restaurant_chats.get(order_data['restaurant_id'])

        if restaurant_chat_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —á–∞—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            await self.bot.send_order_to_restaurant(order_data, restaurant_chat_id)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    bot = RestaurantBot("zxcasdqwe") ###
    order_service = OrderService(bot)
    order_data = {
        'restaurant_id': 123,
        'order_id': 123456,
        'message': '–ó–∞–∫–∞–∑ –Ω–∞ –ø–∏—Ç—Å—É 4 —Å—ã—Ä–∞ –º–∞–∑–µ—Ä–∞—Ç–∏',
    }
    order_service.create_order(order_data)
    bot.run()
