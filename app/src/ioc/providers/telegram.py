from dishka import provide, Provider, Scope, AsyncContainer
from telegram import Bot, Update
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes

from src.application.interfaces.repositories.chat_repository import IChatRepository
from src.application.interfaces.repositories.users_repository import IUsersRepository
from src.application.interfaces.interactors.handlers_interactor import BotHandlerInteractor
from src.application.interfaces.repositories.restaurant_repository import IRestaurantRepository
from src.application.interfaces.repositories.order_repository import IOrderRepository
from src.infrastructure.adapters.telegram.order_notifier import TelegramOrderNotifier
from src.application.interfaces.notification.notifier import INotifier
from src.application.interfaces.transaction_manager import ITransactionManager
from src.config import Config


class TelegramProvider(Provider):
    @provide(scope=Scope.APP)
    async def telegram_bot(self, config: Config) -> Bot:
        return Bot(config.bot.bot_api_key)


    @provide(scope=Scope.REQUEST)
    async def order_notifier(
        self,
        bot: Bot,
        restaurant_repository: IRestaurantRepository
    ) -> INotifier:
        return TelegramOrderNotifier(bot, restaurant_repository)


    @provide(scope=Scope.REQUEST)
    async def bot_handler_interactor(
        self,
        transaction_manager: ITransactionManager,
        order_repository: IOrderRepository,
        users_repository: IUsersRepository,
        chat_repository: IChatRepository,
        notifier: INotifier,
    ) -> BotHandlerInteractor:
        return BotHandlerInteractor(
            transaction_manager,
            order_repository,
            users_repository,
            chat_repository,
            notifier
        )


    @provide(scope=Scope.APP)
    async def telegram_application(
        self,
        config: Config,
        bot: Bot,
        container: 'AsyncContainer'  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö
    ) -> Application:
        """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram Application —Å —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏"""
        application = Application.builder().token(config.bot.bot_api_key).build()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        application.bot_data['container'] = container

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_chat_id
        application.add_handler(CommandHandler("get_chat_id", self._create_chat_id_handler()))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ban
        application.add_handler(CommandHandler("ban", self._create_ban_handler()))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –∑–∞–∫–∞–∑–∞
        application.add_handler(
            CallbackQueryHandler(
                self._create_order_callback_handler(),
                pattern="^order:"
            )
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(
            lambda update, context: update.callback_query.answer("–≠—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"),
            pattern="^disabled$"
        ))

        return application

    def _create_ban_handler(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /ban"""
        async def ban_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
            container = context.bot_data['container']
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
            async with container() as request_container:
                handler: BotHandlerInteractor = await request_container.get(BotHandlerInteractor)
                await handler.handle_ban_command(update, context)
        
        return ban_handler

    def _create_chat_id_handler(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /get_chat_id"""
        async def chat_id_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            chat = update.effective_chat
            chat_id = chat.id
            chat_title = chat.title if chat.title else "–ª–∏—á–Ω—ã–π —á–∞—Ç"
            chat_type = chat.type
            
            message = (
                f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n"
                f"üÜî ID —á–∞—Ç–∞: <code>{chat_id}</code>\n"
                f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}\n"
                f"üî∞ –¢–∏–ø: {chat_type}\n\n"
                f"üí° –≠—Ç–æ—Ç ID –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö"
            )
            
            await update.message.reply_text(message, parse_mode='HTML')
        
        return chat_id_handler


    def _create_order_callback_handler(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        async def order_callback_handler(update, context):
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
            container = context.bot_data['container']
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
            async with container() as request_container:
                handler = await request_container.get(BotHandlerInteractor)
                await handler.handle_order_callback(update, context)

        return order_callback_handler
